
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(docData) {
      return request.auth != null && request.auth.uid == docData.userId;
    }

    function hasRequiredBaseFields(data) {
      return data.userId != null && data.userId != "" &&
             data.period != null && data.period != "" &&
             data.createdAt == request.time; // Ensure server timestamp is used on create
    }
    
    function hasRequiredUserFields(data) {
        return data.uid != null && data.uid != "" &&
               data.email != null && // Email bisa jadi null dari Firebase Auth (misal phone auth)
               data.displayName != null && data.displayName != "" && // Kita asumsikan displayName akan diisi saat profile setup
               data.uprId != null && data.uprId != "" && data.uprId == data.displayName && // uprId = displayName
               data.role != null && (data.role == 'userSatker' || data.role == 'admin') &&
               data.activePeriod != null &&
               data.availablePeriods != null; // availablePeriods bisa array kosong saat awal
    }

    function isNotUpdatingImmutableFieldsUser(data) {
      return !(data.uid in request.resource.data) &&
             !(data.role in request.resource.data) && // Peran tidak boleh diubah pengguna
             !(data.createdAt in request.resource.data);
             // displayName, uprId, activePeriod, availablePeriods boleh diubah
    }

    function hasRequiredGoalFields(data) {
      return data.name != null && data.name != "" &&
             data.code != null && data.code != "";
    }

    function isNotUpdatingImmutableFieldsGoal(data) {
      return !(data.code in request.resource.data) &&
             !(data.userId in request.resource.data) &&
             !(data.period in request.resource.data) &&
             !(data.createdAt in request.resource.data);
    }
    
    function hasRequiredPotentialRiskFields(data) {
      return data.goalId != null && data.goalId != "" &&
             data.sequenceNumber != null &&
             data.description != null && data.description != "";
             // category dan owner boleh null
    }

    function isNotUpdatingImmutableFieldsPotentialRisk(data) {
      return !(data.goalId in request.resource.data) &&
             !(data.userId in request.resource.data) &&
             !(data.period in request.resource.data) &&
             !(data.sequenceNumber in request.resource.data) &&
             !(data.identifiedAt in request.resource.data);
    }

    function hasRequiredRiskCauseFields(data) {
        return data.potentialRiskId != null && data.potentialRiskId != "" &&
               data.goalId != null && data.goalId != "" &&
               data.sequenceNumber != null &&
               data.description != null && data.description != "" &&
               data.source != null && (data.source == 'Internal' || data.source == 'Eksternal');
    }

    function isNotUpdatingImmutableFieldsRiskCause(data) {
        return !(data.potentialRiskId in request.resource.data) &&
               !(data.goalId in request.resource.data) &&
               !(data.userId in request.resource.data) &&
               !(data.period in request.resource.data) &&
               !(data.sequenceNumber in request.resource.data) &&
               !(data.createdAt in request.resource.data);
    }
    
    function hasRequiredControlMeasureFields(data) {
        return data.riskCauseId != null && data.riskCauseId != "" &&
               data.potentialRiskId != null && data.potentialRiskId != "" &&
               data.goalId != null && data.goalId != "" &&
               data.controlType != null && (data.controlType == 'Prv' || data.controlType == 'RM' || data.controlType == 'Crr') &&
               data.sequenceNumber != null &&
               data.description != null && data.description != "";
    }

    function isNotUpdatingImmutableFieldsControlMeasure(data) {
        return !(data.riskCauseId in request.resource.data) &&
               !(data.potentialRiskId in request.resource.data) &&
               !(data.goalId in request.resource.data) &&
               !(data.userId in request.resource.data) &&
               !(data.period in request.resource.data) &&
               !(data.controlType in request.resource.data) && // Tipe kontrol tidak boleh diubah setelah dibuat
               !(data.sequenceNumber in request.resource.data) &&
               !(data.createdAt in request.resource.data);
    }
    
    function hasRequiredMonitoringSessionFields(data) {
      return data.name != null && data.name != "" &&
             data.startDate != null && data.endDate != null &&
             data.status != null && (data.status == 'Aktif' || data.status == 'Selesai' || data.status == 'Dibatalkan');
    }

    function isNotUpdatingImmutableFieldsMonitoringSession(data) {
      return !(data.userId in request.resource.data) &&
             !(data.period in request.resource.data) &&
             !(data.createdAt in request.resource.data);
    }

    // Users collection
    match /users/{userIdDoc} {
      allow read: if request.auth != null; // Pengguna terautentikasi bisa membaca profil (misalnya untuk search UPR)
      allow create: if request.auth != null &&
                       request.auth.uid == userIdDoc &&
                       request.resource.data.uid == request.auth.uid &&
                       hasRequiredUserFields(request.resource.data) &&
                       request.resource.data.createdAt == request.time;
      allow update: if request.auth != null && 
                       request.auth.uid == userIdDoc && // Hanya pemilik yang bisa update
                       isNotUpdatingImmutableFieldsUser(request.resource.data) &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if false; // Pengguna tidak bisa menghapus profil mereka sendiri
    }

    // Goals collection
    match /goals/{goalId} {
      allow read, list: if request.auth != null; // Asumsi: kueri klien akan filter berdasarkan userId dan period
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredBaseFields(request.resource.data) &&
                       hasRequiredGoalFields(request.resource.data);
      allow update: if request.auth != null &&
                       isOwner(resource.data) &&
                       isNotUpdatingImmutableFieldsGoal(request.resource.data) &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // PotentialRisks collection
    match /potentialRisks/{potentialRiskId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredBaseFields(request.resource.data) &&
                       hasRequiredPotentialRiskFields(request.resource.data) &&
                       // Pastikan goal induk ada dan dimiliki oleh pengguna dengan uprId dan period yang sama
                       exists(/databases/$(database)/documents/goals/$(request.resource.data.goalId)) &&
                       get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.period == request.resource.data.period;
      allow update: if request.auth != null &&
                       isOwner(resource.data) &&
                       isNotUpdatingImmutableFieldsPotentialRisk(request.resource.data) &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // RiskCauses collection
    match /riskCauses/{riskCauseId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredBaseFields(request.resource.data) &&
                       hasRequiredRiskCauseFields(request.resource.data) &&
                       // Pastikan potentialRisk induk ada dan dimiliki oleh pengguna dengan uprId dan period yang sama
                       exists(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)) &&
                       get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.period == request.resource.data.period;
      allow update: if request.auth != null &&
                       isOwner(resource.data) &&
                       isNotUpdatingImmutableFieldsRiskCause(request.resource.data) &&
                       request.resource.data.analysisUpdatedAt == request.time; // Menggunakan analysisUpdatedAt
      allow delete: if request.auth != null && isOwner(resource.data);
    }
    
    // ControlMeasures collection
    match /controlMeasures/{controlMeasureId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredBaseFields(request.resource.data) &&
                       hasRequiredControlMeasureFields(request.resource.data) &&
                       // Pastikan riskCause induk ada dan dimiliki oleh pengguna dengan uprId dan period yang sama
                       exists(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)) &&
                       get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.period == request.resource.data.period;
      allow update: if request.auth != null &&
                       isOwner(resource.data) &&
                       isNotUpdatingImmutableFieldsControlMeasure(request.resource.data) &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // MonitoringSessions collection
    match /monitoringSessions/{sessionId} {
      allow read, list: if request.auth != null; // Asumsi: kueri klien akan filter berdasarkan userId dan period aplikasi
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredBaseFields(request.resource.data) && // Menggunakan base fields
                       hasRequiredMonitoringSessionFields(request.resource.data);
      allow update: if request.auth != null &&
                       isOwner(resource.data) &&
                       isNotUpdatingImmutableFieldsMonitoringSession(request.resource.data) && // Buat fungsi helper jika perlu
                       request.resource.data.updatedAt == request.time;
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // RiskExposures collection (placeholder, perlu disesuaikan)
    match /riskExposures/{exposureId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // Perlu lebih detail
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Fallback rule untuk pengembangan (akan kedaluwarsa)
    // Hapus atau ganti dengan aturan yang lebih ketat untuk produksi
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2025, 7, 25);
    // }
  }
}
