
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(docData) {
      return request.auth != null && docData.userId == request.auth.uid;
    }

    function hasRequiredCreateFieldsAndOwnership(collectionName) {
      let data = request.resource.data;
      let commonFields = data.userId == request.auth.uid &&
                         data.uprId != null && data.uprId != "" &&
                         data.period != null && data.period != "" &&
                         data.createdAt == request.time; // Enforce server timestamp on create

      if (!commonFields) { return false; }

      if (collectionName == 'goals') {
        return data.name != null && data.name != "" &&
               data.code != null && data.code != "" &&
               data.description != null && data.description != "";
      }
      if (collectionName == 'potentialRisks') {
        return data.goalId != null && data.goalId != "" &&
               data.description != null && data.description != "" &&
               data.sequenceNumber != null;
      }
      if (collectionName == 'riskCauses') {
        return data.potentialRiskId != null && data.potentialRiskId != "" &&
               data.goalId != null && data.goalId != "" && // Denormalized for rule checking
               data.description != null && data.description != "" &&
               data.source != null && data.source != "" &&
               data.sequenceNumber != null;
      }
      if (collectionName == 'controlMeasures') {
         return data.riskCauseId != null && data.riskCauseId != "" &&
                data.potentialRiskId != null && data.potentialRiskId != "" && // Denormalized
                data.goalId != null && data.goalId != "" && // Denormalized
                data.controlType != null && data.controlType != "" &&
                data.sequenceNumber != null &&
                data.description != null && data.description != "";
      }
      if (collectionName == 'users') {
        return data.uid == request.auth.uid && // UID must match authenticated user
               data.email != null && // Email can be null from some providers, adjust if needed
               data.role != null && (data.role == 'admin' || data.role == 'userSatker');
      }
      return false; // Unknown collection
    }

    function isAllowedUpdate(collectionName) {
      let data = request.resource.data;
      let existingData = resource.data;
      let commonImmutable = data.userId == existingData.userId &&
                            data.uprId == existingData.uprId &&
                            data.period == existingData.period &&
                            data.createdAt == existingData.createdAt;
      
      if (!commonImmutable) { return false; }
      
      if (collectionName == 'goals') {
        return data.code == existingData.code; // Code should be immutable after creation
      }
      if (collectionName == 'potentialRisks' || collectionName == 'riskCauses' || collectionName == 'controlMeasures') {
        return data.sequenceNumber == existingData.sequenceNumber; // Sequence number immutable
      }
      if (collectionName == 'users') {
        return data.uid == existingData.uid &&
               data.role == existingData.role && // Role should not be changed by user
               data.createdAt == existingData.createdAt; // createdAt immutable
      }
      return true; // Allow updates for other fields if not specified
    }

    // USERS Collection
    match /users/{userId} {
      allow read: if request.auth != null; // Allow any authenticated user to read user profiles (e.g., for display names)
                  // Or, for stricter: if request.auth.uid == userId; (only read own profile)
      allow create: if request.auth != null && 
                       request.resource.data.uid == request.auth.uid && // User can only create their own doc
                       hasRequiredCreateFieldsAndOwnership('users');
      allow update: if request.auth != null && 
                       request.auth.uid == userId && // User can only update their own doc
                       isAllowedUpdate('users');
      allow delete: if false; // Generally users should not delete their own auth/user record directly
    }

    // GOALS Collection
    match /goals/{goalId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null && hasRequiredCreateFieldsAndOwnership('goals');
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('goals');
      allow delete: if request.auth != null && isOwner(resource.data);

      // Potential Risks Subcollection (or top-level collection)
      match /potentialRisks/{potentialRiskId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null &&
                         hasRequiredCreateFieldsAndOwnership('potentialRisks') &&
                         get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.userId == request.auth.uid &&
                         get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.uprId == request.resource.data.uprId &&
                         get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.period == request.resource.data.period;
        allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('potentialRisks');
        allow delete: if request.auth != null && isOwner(resource.data);

        // Risk Causes Subcollection
        match /riskCauses/{riskCauseId} {
          allow read, list: if request.auth != null;
          allow create: if request.auth != null &&
                           hasRequiredCreateFieldsAndOwnership('riskCauses') &&
                           get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)).data.userId == request.auth.uid &&
                           get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)).data.uprId == request.resource.data.uprId &&
                           get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)).data.period == request.resource.data.period;
          allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('riskCauses');
          allow delete: if request.auth != null && isOwner(resource.data);

          // Control Measures Subcollection
          match /controlMeasures/{controlMeasureId} {
            allow read, list: if request.auth != null;
            allow create: if request.auth != null &&
                             hasRequiredCreateFieldsAndOwnership('controlMeasures') &&
                             get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)/riskCauses/$(request.resource.data.riskCauseId)).data.userId == request.auth.uid &&
                             get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)/riskCauses/$(request.resource.data.riskCauseId)).data.uprId == request.resource.data.uprId &&
                             get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)/potentialRisks/$(request.resource.data.potentialRiskId)/riskCauses/$(request.resource.data.riskCauseId)).data.period == request.resource.data.period;
            allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('controlMeasures');
            allow delete: if request.auth != null && isOwner(resource.data);
          }
        }
      }
    }

    /*
    // --- ALTERNATIVE: If using TOP-LEVEL collections for everything ---
    // You would need to adjust the 'create' rules to validate parent document existence and ownership
    // based on IDs stored in the child document.

    match /potentialRisks/{potentialRiskId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       hasRequiredCreateFieldsAndOwnership('potentialRisks') &&
                       // Example: Check if the referenced goal exists and is owned by the user
                       exists(/databases/$(database)/documents/goals/$(request.resource.data.goalId)) &&
                       get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.uprId == request.resource.data.uprId &&
                       get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.period == request.resource.data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('potentialRisks');
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    match /riskCauses/{riskCauseId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       hasRequiredCreateFieldsAndOwnership('riskCauses') &&
                       exists(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)) &&
                       get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.uprId == request.resource.data.uprId &&
                       get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.period == request.resource.data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('riskCauses');
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    match /controlMeasures/{controlMeasureId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       hasRequiredCreateFieldsAndOwnership('controlMeasures') &&
                       exists(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)) &&
                       get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.uprId == request.resource.data.uprId &&
                       get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.period == request.resource.data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('controlMeasures');
      allow delete: if request.auth != null && isOwner(resource.data);
    }
    */
  }
}
