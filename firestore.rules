rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(docData) {
      return request.auth != null && request.auth.uid == docData.userId;
    }

    // Memastikan field yang tidak boleh diubah (immutable) tidak diubah saat update
    function isNotUpdatingImmutableFieldsForUser(requestData, resourceData) {
      return requestData.uid == resourceData.uid &&
             requestData.role == resourceData.role &&
             requestData.createdAt == resourceData.createdAt;
             // uprId dan displayName sekarang bisa diubah, jadi dihapus dari sini
    }

    function hasRequiredGoalFields(data) {
      return data.name != null && data.name != "" &&
             data.code != null && data.code != "" &&
             data.uprId != null && data.uprId != "" && // uprId di goal harus ada
             data.period != null && data.period != "" &&
             data.userId == request.auth.uid &&
             data.createdAt == request.time;
    }
    
    function isGoalOwner(goalId) {
        return get(/databases/$(database)/documents/goals/$(goalId)).data.userId == request.auth.uid;
    }

    // Aturan untuk Koleksi 'users'
    match /users/{userIdDoc} {
      allow read: if request.auth != null; // Atau if request.auth.uid == userIdDoc; untuk lebih ketat

      allow create: if request.auth != null &&
                       request.auth.uid == userIdDoc && // ID dokumen harus sama dengan UID pengguna yang login
                       request.resource.data.uid == request.auth.uid && // Field 'uid' dalam data harus sama
                       request.resource.data.displayName != null && request.resource.data.displayName != "" &&
                       request.resource.data.uprId == request.resource.data.displayName && // uprId harus sama dengan displayName
                       request.resource.data.role != null && 
                       (request.resource.data.role == 'userSatker' || request.resource.data.role == 'admin') &&
                       request.resource.data.createdAt == request.time; // serverTimestamp

      allow update: if request.auth != null &&
                       request.auth.uid == userIdDoc && // Hanya pemilik yang bisa update
                       isNotUpdatingImmutableFieldsForUser(request.resource.data, resource.data) &&
                       // Pastikan jika displayName diubah, uprId juga diubah dan cocok
                       (request.resource.data.displayName == resource.data.displayName || request.resource.data.uprId == request.resource.data.displayName) &&
                       // Pastikan jika displayName tidak diubah, uprId juga tidak berubah atau cocok
                       (request.resource.data.displayName != resource.data.displayName || request.resource.data.uprId == resource.data.uprId);


      allow delete: if false; // Pengguna tidak bisa menghapus profil mereka sendiri
    }

    // Aturan untuk Koleksi 'goals'
    match /goals/{goalId} {
      allow read: if request.auth != null; // Semua pengguna terautentikasi bisa baca (filter UPR di client)
      allow list: if request.auth != null; // Izinkan kueri daftar

      allow create: if request.auth != null &&
                       hasRequiredGoalFields(request.resource.data) &&
                       // Pastikan uprId pada goal cocok dengan uprId (displayName) pengguna yang membuat
                       request.resource.data.uprId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uprId;
                       
      allow update: if request.auth != null && isOwner(resource.data) &&
                       request.resource.data.name != null && request.resource.data.name != "" &&
                       request.resource.data.userId == resource.data.userId && // Tidak bisa ganti pemilik
                       request.resource.data.uprId == resource.data.uprId &&   // Tidak bisa ganti UPR
                       request.resource.data.period == resource.data.period && // Tidak bisa ganti Periode
                       request.resource.data.code == resource.data.code &&     // Tidak bisa ganti kode
                       request.resource.data.createdAt == resource.data.createdAt; // Tidak bisa ganti tanggal dibuat
                       
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // Aturan untuk Subkoleksi (atau koleksi top-level jika Anda memilih struktur itu)
    // Contoh untuk potentialRisks (asumsikan koleksi top-level dengan goalId)
    match /potentialRisks/{prId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.goalId != null &&
                       request.resource.data.uprId == get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.uprId &&
                       request.resource.data.period == get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.period &&
                       exists(/databases/$(database)/documents/goals/$(request.resource.data.goalId)) &&
                       isGoalOwner(request.resource.data.goalId); // Hanya pemilik Goal yang bisa tambah PotentialRisk

      allow update: if request.auth != null && isOwner(resource.data) &&
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.goalId == resource.data.goalId &&
                       request.resource.data.uprId == resource.data.uprId &&
                       request.resource.data.period == resource.data.period;
                       
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // TODO: Tambahkan aturan serupa untuk riskCauses dan controlMeasures
    // Sesuaikan path jika mereka adalah subkoleksi

    // Default deny all (jika tidak ada aturan di atas yang cocok)
    // match /{document=**} {
    //   allow read, write: if false;
    // }

    // Aturan permisif untuk development (hapus atau ganti sebelum produksi)
     match /{document=**} {
       allow read, write: if request.time < timestamp.date(2025, 7, 30);
     }
  }
}
