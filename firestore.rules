
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(docData) {
      return request.auth != null && docData.userId == request.auth.uid;
    }

    // Checks for required fields during creation and ownership
    // Note: Specific required fields for each collection might vary
    function hasRequiredCreateFieldsAndOwnership(collectionName) {
      let data = request.resource.data;
      let baseCheck = request.auth != null &&
                      data.userId == request.auth.uid &&
                      data.uprId is string && data.uprId != '' &&
                      data.period is string && data.period != '' &&
                      data.createdAt == request.time; // Ensure createdAt is server timestamp

      if (collectionName == 'goals') {
        return baseCheck && data.name is string && data.code is string;
      }
      if (collectionName == 'potentialRisks') {
        return baseCheck && data.goalId is string && data.description is string && data.sequenceNumber is number;
      }
      if (collectionName == 'riskCauses') {
        return baseCheck && data.potentialRiskId is string && data.goalId is string && data.description is string && data.source is string && data.sequenceNumber is number;
      }
      if (collectionName == 'controlMeasures') {
        return baseCheck && data.riskCauseId is string && data.potentialRiskId is string && data.goalId is string && data.description is string && data.controlType is string && data.sequenceNumber is number;
      }
      return false;
    }

    // Checks if non-modifiable fields are being changed during an update
    function isAllowedUpdate(collectionName) {
      let data = request.resource.data;
      let existingData = resource.data;
      return data.userId == existingData.userId &&
             data.uprId == existingData.uprId &&
             data.period == existingData.period &&
             data.createdAt == existingData.createdAt &&
             (collectionName == 'goals' ? data.code == existingData.code : true) && // goal code is immutable
             (collectionName == 'potentialRisks' || collectionName == 'riskCauses' || collectionName == 'controlMeasures' ? data.sequenceNumber == existingData.sequenceNumber : true) && // sequence numbers are immutable
             (data.containsKey('updatedAt') ? data.updatedAt == request.time : true); // Ensure updatedAt is server timestamp if provided
    }

    // Goals collection
    match /goals/{goalId} {
      allow read, list: if request.auth != null;
      allow create: if hasRequiredCreateFieldsAndOwnership('goals');
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('goals');
      allow delete: if request.auth != null && isOwner(resource.data);

      // PotentialRisks as a subcollection (example, adjust if top-level)
      match /potentialRisks/{potentialRiskId} {
        allow read, list: if request.auth != null;
        // Allow create if user owns the parent goal and uprId/period match
        allow create: if hasRequiredCreateFieldsAndOwnership('potentialRisks') &&
                        get(/databases/$(database)/documents/goals/$(goalId)).data.userId == request.auth.uid &&
                        request.resource.data.goalId == goalId &&
                        request.resource.data.uprId == get(/databases/$(database)/documents/goals/$(goalId)).data.uprId &&
                        request.resource.data.period == get(/databases/$(database)/documents/goals/$(goalId)).data.period;
        allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('potentialRisks');
        allow delete: if request.auth != null && isOwner(resource.data);

        // RiskCauses as a subcollection (example)
        match /riskCauses/{riskCauseId} {
          allow read, list: if request.auth != null;
          allow create: if hasRequiredCreateFieldsAndOwnership('riskCauses') &&
                          get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)).data.userId == request.auth.uid &&
                          request.resource.data.potentialRiskId == potentialRiskId &&
                          request.resource.data.goalId == goalId &&
                          request.resource.data.uprId == get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)).data.uprId &&
                          request.resource.data.period == get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)).data.period;
          allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('riskCauses');
          allow delete: if request.auth != null && isOwner(resource.data);

            // ControlMeasures as a subcollection (example)
            match /controlMeasures/{controlMeasureId} {
              allow read, list: if request.auth != null;
              allow create: if hasRequiredCreateFieldsAndOwnership('controlMeasures') &&
                              get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)/riskCauses/$(riskCauseId)).data.userId == request.auth.uid &&
                              request.resource.data.riskCauseId == riskCauseId &&
                              request.resource.data.potentialRiskId == potentialRiskId &&
                              request.resource.data.goalId == goalId &&
                              request.resource.data.uprId == get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)/riskCauses/$(riskCauseId)).data.uprId &&
                              request.resource.data.period == get(/databases/$(database)/documents/goals/$(goalId)/potentialRisks/$(potentialRiskId)/riskCauses/$(riskCauseId)).data.period;
              allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('controlMeasures');
              allow delete: if request.auth != null && isOwner(resource.data);
            }
        }
      }
    }

    // If you decide to make potentialRisks, riskCauses, controlMeasures top-level collections
    // (not subcollections), you would define their rules here like this:
    /*
    match /potentialRisks/{potentialRiskId} {
      allow read, list: if request.auth != null;
      allow create: if hasRequiredCreateFieldsAndOwnership('potentialRisks') &&
                      exists(/databases/$(database)/documents/goals/$(request.resource.data.goalId)) &&
                      get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.userId == request.auth.uid &&
                      request.resource.data.uprId == get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.uprId &&
                      request.resource.data.period == get(/databases/$(database)/documents/goals/$(request.resource.data.goalId)).data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('potentialRisks');
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    match /riskCauses/{riskCauseId} {
      allow read, list: if request.auth != null;
      allow create: if hasRequiredCreateFieldsAndOwnership('riskCauses') &&
                      exists(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)) &&
                      get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.userId == request.auth.uid &&
                      request.resource.data.uprId == get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.uprId &&
                      request.resource.data.period == get(/databases/$(database)/documents/potentialRisks/$(request.resource.data.potentialRiskId)).data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('riskCauses');
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    match /controlMeasures/{controlMeasureId} {
      allow read, list: if request.auth != null;
      allow create: if hasRequiredCreateFieldsAndOwnership('controlMeasures') &&
                      exists(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)) &&
                      get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.userId == request.auth.uid &&
                      request.resource.data.uprId == get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.uprId &&
                      request.resource.data.period == get(/databases/$(database)/documents/riskCauses/$(request.resource.data.riskCauseId)).data.period;
      allow update: if request.auth != null && isOwner(resource.data) && isAllowedUpdate('controlMeasures');
      allow delete: if request.auth != null && isOwner(resource.data);
    }
    */
  }
}

    